#!/usr/bin/python3

import re, sys, sqlite3

dodebug = False
pretty = False

def debug(*args):
    global dodebug
    if dodebug:
        print(*args)

class Predicate:
    def __init__(self, p, args, neg=False):
        self.p = p
        self.args = args
        self.neg = neg
    def __str__(self):
        return ('!' if self.neg else '') + self.p + '(' + ', '.join(self.args) + ')'
    def __repr__(self):
        return ('!' if self.neg else '') + self.p + '(' + ', '.join(self.args) + ')'

class LookAhead:
    def __init__(self, it):
        self._it = iter(it)
        self._x = None
        self._cached = False
        self._popcount = 0

    def _fillcache(self):
        if not self._cached:
            self._x = next(self._it)
            self._cached = True

    def hasnext(self):
        try:
            self._fillcache()
            return True
        except StopIteration:
            return False

    def peek(self):
        self._fillcache()
        return self._x

    def pop(self):
        self._fillcache()
        self._cached = False
        self._popcount += 1
        return self._x

    def get_popcount(self):
        return self._popcount

    def undo(self, oldcount):
        d = self.get_popcount() - oldcount
        if d == 0:
            return True
        elif self._cached is None and d == 1:
            self.cached = True
            return True
        else:
            return False

def sequence(parsers):
    def parsesequence(stream):
        result = []
        for p in parsers:
            x = p(stream)
            if x is None:
                return None
            result.append(x)
        return result
    return parsesequence

def alternative(parsers):
    def parsealternative(stream):
        c = stream.get_popcount()
        for p in parsers:
            x = p(stream)
            if x is not None:
                return x
            if not stream.undo(c):
                return None
    return parsealternative

def many(parser):
    def parsemany(stream):
        result = []
        while True:
            c = stream.get_popcount()
            x = parser(stream)
            if x is None:
                if stream.undo(c):
                    return result
                else:
                    return None
            result.append(x)
    return parsemany

def many1(parser):
    return sequence(parser, many(parser))

def eof(stream):
    if stream.hasnext():
        return None
    else:
        return True

def string(x):
    def parsestring(stream):
        if stream.hasnext() and stream.peek() == x:
            return stream.pop()
    return parsestring

def comma(stream):
    return string(',')(stream)

def parenleft(stream):
    return string('(')(stream)

def parenright(stream):
    return string(')')(stream)

def sepby(sep, p):
    def parsesepby(stream):
        if not stream.hasnext():
            return x
        x = p(stream)
        if x is None:
            return None
        c = stream.get_popcount()
        rest = many(sequence([sep, p]))(stream)
        if rest is None:
            if stream.undo(c):
                return [x]
            else:
                return None
        result = [x]
        for y, z in rest:
            result.append(y)
            result.append(z)
        return result
    return parsesepby

def sepbyignore(sep, p):
    q = sepby(sep, p)
    def parsesepbyignore(stream):
        x = q(stream)
        if x is None:
            return None
        return x[0::2]
    return parsesepbyignore

def identifier(stream):
    if stream.hasnext():
        x = stream.peek()
        if x == '*' or x.isalnum() or x[0] == '"':
            return stream.pop()

def predicate(stream):
    c = stream.get_popcount()
    neg = string("!")(stream)
    if neg is None:
        if not stream.undo(c):
            assert False
        neg = False
    p = identifier(stream)
    if p is None:
        return None
    x = parenleft(stream)
    if x is None:
        return None
    args = sepbyignore(comma, identifier)(stream)
    if args is None:
        return None
    x = parenright(stream)
    if x is None:
        return None
    return Predicate(p, args, neg)

def conjunction(stream):
    return sepbyignore(string('&&'), predicate)(stream)

def relational_calculus(stream):
    x = sepbyignore(string('||'), conjunction)(stream)
    if x is None:
        return None
    if not eof(stream):
        return None
    return x

class Schema:
    def __init__(self, tables):
        self.tables = tables

    def getheader(self, tablename):
        return self.tables.get(tablename)

def sql_string_literal(val):
    val = val.replace('\\', '\\\\')
    val = val.replace('"', '\\"')
    val = '"' + val + '"'
    return val

def makesqlconj(schema, wants, conj, bindings):
    froms = []
    bound = []
    preds = dict()
    for p in conj:
        if p.p not in schema:
            raise Exception('No such table: %s' % p.p)
        if len(p.args) != len(schema[p.p]):
            raise Exception('Wrong number of arguments: %s' % p)
    for i, p in enumerate(conj):
        if not p.neg:
            pred = '%s%s' % (p.p, i)
            froms.append((p.p, pred))
            for j, var in enumerate(p.args):
                col = schema[p.p][j]
                if var == '*':
                    pass
                elif var[0] == '"' or var.isdigit():
                    bound.append((pred, col, var))
                else:
                    if var not in preds:
                        preds[var] = []
                    preds[var].append((pred, col))
    for p in conj:
        if p.neg:
            for var in p.args:
                if var != '*' and not var[0] == '"' and not var.isdigit() and not var in preds and not var in bindings:
                    raise Exception('variable %s only bound in a negative clause in conjunction %s' % (var, conj))
    for var in wants:
        if var not in preds:
            raise Exception('variable %s not bound in conjunction %s' % (var,conj))
    result = 'SELECT DISTINCT'
    xs = []
    for var in wants:
        pred, col = preds[var][0]
        xs.append('\n\t%s.%s AS %s' % (pred, col, var))
    result += ','.join(xs)
    result += '\nFROM'
    result += ','.join('\n\t%s %s' % (x, y) for x, y in froms)
    result += '\nWHERE 1'
    for var, val in bindings.items():
        if var in preds:
            pred, col = preds[var][0]
            lit = sql_string_literal(val)
            result += '\n\tAND %s.%s = %s' % (pred, col, lit)
    for pred, col, var in bound:
        result += '\n\tAND %s.%s = %s' % (pred, col, var)
    for same in preds.values():
        pred1, col1 = same[0]
        for pred2, col2 in same[1:]:
            result += '\n\tAND %s.%s = %s.%s' % (pred1, col1, pred2, col2)
    for p in (p for p in conj if p.neg):
        result += '\n\tAND NOT EXISTS(SELECT 1 FROM %s WHERE 1' % p.p
        for i, var in enumerate(p.args):
            if var == '*':
                pass
            elif var[0] == '"':
                result += '\n\t\t\tAND %s = %s' % (schema[p.p][i], var)
            elif var in bindings and not var in preds:
                lit = sql_string_literal(bindings[var])
                result += '\n\t\t\tAND %s = %s' % (schema[p.p][i], lit)
            else:
                assert var in preds
                pred, col = preds[var][0]
                result += '\n\t\t\tAND %s = %s.%s' % (schema[p.p][i], pred, col)
        result += '\n\t)'
    return result

def makesql(schema, wants, query, bindings):
    sqls = [makesqlconj(schema, wants, conj, bindings) for conj in query]
    return '\nUNION\n'.join(sqls) + "\nORDER BY %s ASC" % (', '.join(wants))

def lex(query):
    out = []
    exprs = [r'!', r'[a-zA-Z][a-zA-Z0-9]*', r'\*', r'"[^"]*"', r',', r'&&', r'\|\|',r'\(',r'\)']
    while True:
        query = query.strip()
        if not query:
            break
        x = None
        for e in exprs:
            m = re.match(e, query)
            if m is not None:
                x = m.group(0)
                break
        if x is None:
            return None
        query = query[len(x):]
        out.append(x)
    return out

def splitline(line):
    out = []
    w = ''
    started = False
    escaped = False
    quoted = False
    for c in line:
        if escaped:
            w += c
            started = True
            escaped = False
        elif c == '\\':
            escaped = True
        elif c == '"':
            quoted = not quoted
            started = True
        elif quoted or not c.isspace():
            w += c
            started = True
        elif started:
            out.append(w)
            w = ''
            started = False
    if quoted or escaped:
        print('Unexpected end of line: ' + line, file=sys.stderr)
        return None
    if started:
        out.append(w)
    return out

def escapetoken(x):
    if len(x.split(None, 1)) > 1:
        x = x.replace('\\','\\\\')
        x = x.replace('"', '\\"')
        x = '"' + x + '"'
    return x

def joinline(args):
    out = []
    for x in args:
        x = escapetoken(x)
        out.append(x)
    return '\t'.join(out)

def build_db(lines):
    defaultcolnames = ['_%d_' % x for x in range(1, 100)]
    conn = sqlite3.connect(':memory:')
    schema = {}
    valcoll = []
    prevsql = ""
    for line in lines:
        line = line.strip()
        if not line or line[0] in '!#%':
            continue
        words = splitline(line)
        tblname = words[0]
        values = words[1:]
        if len(values) == 0:
            raise Exception('value(s) missing: ' + line)
        if len(values) > len(defaultcolnames):
            raise Exception('sorry, too many values: ' + line)
        if tblname not in schema:
            schema[tblname] = defaultcolnames[:len(values)]
            names = [x + ' VARCHAR NOT NULL' for x in schema[tblname]]
            sql = 'CREATE TABLE %s (%s)' % (tblname, ', '.join(names))
            debug(sql)
            conn.execute(sql)
        if len(values) != len(schema[tblname]):
            raise Exception('too few or too many values: %s %s' % (tblname, values))
        sql = 'INSERT INTO %s VALUES (%s)' % (tblname, ', '.join('?' * len(values)))
        if not sql == prevsql:
            conn.executemany(prevsql, valcoll)
            valcoll = []
        valcoll.append(values)
        prevsql = sql
    conn.executemany(prevsql, valcoll)
    return conn, schema

def parse_binding(x):
    if '=' in x:
        k, v = x.split('=', 1)
        if k[:1].isalpha() and k.isalnum():
            return k, v
    return None

def parse_selectvars(var_string):
    vs = [x.strip() for x in var_string.split(',')]
    if len(vs) == 0:
        return None
    for v in vs:
        if not v[:1].isalpha() or not v.isalnum():
            return None
    return vs

def parse_query(query_string):
    tokens = lex(query_string)
    if tokens is None:
        raise Exception('Failed to lex query')
    return relational_calculus(LookAhead(tokens))

def relq_main(args):
    global dodebug
    global pretty

    bindings = {}

    while args and args[0][:1] == '-':
        if args[0] == '--debug':
            dodebug = True
            args = args[1:]
        elif args[0] == '--pretty':
            pretty = True
            args = args[1:]
        elif args[0][:2] == '-v':
            x = parse_binding(args[0][2:])
            if x is None:
                raise Exception("Invalid variable binding: " + args[0])
            var, val = x
            if var in bindings:
                raise Exception("Variable bound twice: " + var)
            bindings[var] = val
            args = args[1:]
        else:
            raise Exception("Unrecognized command line argument: " + args[0])

    if len(args) != 2:
        print("""Usage:
    relq [OPTION...] [-vVAR=VALUE...] 'VAR[,VAR...]' 'QUERY' < input
available options: --debug, --pretty

Example:
    relq -vY=2016 S,SD,L,LD 'student(S,SD) && immatriculated(S, Y) && lecture(L,LD) && registered(S,L)' < example.txt""", file=sys.stderr)
        sys.exit(1)

    wants = parse_selectvars(args[0])
    query = parse_query(args[1])

    if wants is None:
        raise Exception("Bad query variables")
    if query is None:
        raise Exception('Failed to parse query')
    debug('query string parsed as', query)

    conn, schema = build_db(sys.stdin)

    sql = makesql(schema, wants, query, bindings)
    debug(sql)
    result = list(conn.execute(sql))

    if pretty:
        colw = [0] * len(wants)
        for row in result:
            for i, x in enumerate(row[:-1]):
                colw[i] = max(colw[i], len(x) + 2)
        for row in result:
            line = ''.join(x.ljust(colw[i]) for i, x in enumerate(row))
            print(line)
    else:
        for row in result:
            print(joinline(row))

if __name__ == '__main__':
    relq_main(sys.argv[1:])
